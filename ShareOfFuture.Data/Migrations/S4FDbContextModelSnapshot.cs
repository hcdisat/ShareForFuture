// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShareForFuture.Data;

#nullable disable

namespace ShareForFuture.Data.Migrations
{
    [DbContext(typeof(S4FDbContext))]
    partial class S4FDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OfferingOfferingTag", b =>
                {
                    b.Property<int>("OfferingsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("OfferingsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("OfferingOfferingTag");
                });

            modelBuilder.Entity("ShareForFuture.Data.Complain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<int?>("ComplaineeId")
                        .HasColumnType("int");

                    b.Property<int?>("ComplainerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("ComplaineeId");

                    b.HasIndex("ComplainerId");

                    b.ToTable("Complains");
                });

            modelBuilder.Entity("ShareForFuture.Data.ComplainNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ComplainId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DoneDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ComplainId");

                    b.ToTable("ComplainNotes");
                });

            modelBuilder.Entity("ShareForFuture.Data.Offering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastVerificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 10, 17, 15, 27, 50, 464, DateTimeKind.Unspecified).AddTicks(9081), new TimeSpan(0, -4, 0, 0, 0)));

                    b.Property<DateTimeOffset?>("MarkedAsUnavailableDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("OfferingDevices");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("OfferingDeviceCategories");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfferingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId");

                    b.ToTable("OfferingDeviceImages");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("OfferingTags");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingUnavailabilityPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("OfferingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Until")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OfferingId")
                        .IsUnique()
                        .HasFilter("[OfferingId] IS NOT NULL");

                    b.ToTable("DeviceUnavailabilityPeriods");

                    b.HasCheckConstraint("UntilAfterFrom", "[Until] IS NULL\r\n                OR [Until] > [From]");
                });

            modelBuilder.Entity("ShareForFuture.Data.Sharing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AcceptOrDeclineMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("AcceptedDeclinedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<string>("BorrowerToLenderNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BorrowerToLenderRating")
                        .HasColumnType("int");

                    b.Property<int?>("BorrowerToOffering")
                        .HasColumnType("int");

                    b.Property<string>("BorrowerToOfferingNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastRequestNotificationSentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LenderToBorrowerNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LenderToBorrowerRating")
                        .HasColumnType("int");

                    b.Property<int?>("OfferingId")
                        .HasColumnType("int");

                    b.Property<bool?>("OfferingWasAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ShareActivationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ShareDoneDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Until")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("OfferingId");

                    b.ToTable("Sharings");

                    b.HasCheckConstraint("UntilAfterFrom", "[Until] > [From]");
                });

            modelBuilder.Entity("ShareForFuture.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("EmailVerifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("IdentityProvider")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastLogingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShareForFuture.Data.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 10, 17, 15, 27, 50, 465, DateTimeKind.Unspecified).AddTicks(8243), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "S4FEmployee",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 10, 17, 15, 27, 50, 465, DateTimeKind.Unspecified).AddTicks(8264), new TimeSpan(0, -4, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 10, 17, 15, 27, 50, 465, DateTimeKind.Unspecified).AddTicks(8269), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "Manager",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 10, 17, 15, 27, 50, 465, DateTimeKind.Unspecified).AddTicks(8271), new TimeSpan(0, -4, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2021, 10, 17, 15, 27, 50, 465, DateTimeKind.Unspecified).AddTicks(8275), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "SystemAdministrator",
                            UpdatedAt = new DateTimeOffset(new DateTime(2021, 10, 17, 15, 27, 50, 465, DateTimeKind.Unspecified).AddTicks(8277), new TimeSpan(0, -4, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("OfferingOfferingTag", b =>
                {
                    b.HasOne("ShareForFuture.Data.Offering", null)
                        .WithMany()
                        .HasForeignKey("OfferingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShareForFuture.Data.OfferingTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShareForFuture.Data.Complain", b =>
                {
                    b.HasOne("ShareForFuture.Data.User", "AssignedTo")
                        .WithMany("AssignedComplains")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShareForFuture.Data.User", "Complainee")
                        .WithMany("ComplainsAbout")
                        .HasForeignKey("ComplaineeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShareForFuture.Data.User", "Complainer")
                        .WithMany("Complains")
                        .HasForeignKey("ComplainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedTo");

                    b.Navigation("Complainee");

                    b.Navigation("Complainer");
                });

            modelBuilder.Entity("ShareForFuture.Data.ComplainNote", b =>
                {
                    b.HasOne("ShareForFuture.Data.Complain", "Complain")
                        .WithMany("Notes")
                        .HasForeignKey("ComplainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Complain");
                });

            modelBuilder.Entity("ShareForFuture.Data.Offering", b =>
                {
                    b.HasOne("ShareForFuture.Data.OfferingCategory", "Category")
                        .WithMany("Offerings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShareForFuture.Data.User", "Owner")
                        .WithMany("Offerings")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingCategory", b =>
                {
                    b.HasOne("ShareForFuture.Data.OfferingCategory", "ParentCategory")
                        .WithMany("ChildrenCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingImage", b =>
                {
                    b.HasOne("ShareForFuture.Data.Offering", "Offering")
                        .WithMany("Images")
                        .HasForeignKey("OfferingId");

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingUnavailabilityPeriod", b =>
                {
                    b.HasOne("ShareForFuture.Data.Offering", "Offering")
                        .WithOne("UnavailabilityPeriod")
                        .HasForeignKey("ShareForFuture.Data.OfferingUnavailabilityPeriod", "OfferingId");

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("ShareForFuture.Data.Sharing", b =>
                {
                    b.HasOne("ShareForFuture.Data.User", "Borrower")
                        .WithMany("Borrows")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShareForFuture.Data.Offering", "Offering")
                        .WithMany("Sharings")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Borrower");

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("ShareForFuture.Data.User", b =>
                {
                    b.HasOne("ShareForFuture.Data.UserGroup", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ShareForFuture.Data.Complain", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("ShareForFuture.Data.Offering", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Sharings");

                    b.Navigation("UnavailabilityPeriod");
                });

            modelBuilder.Entity("ShareForFuture.Data.OfferingCategory", b =>
                {
                    b.Navigation("ChildrenCategories");

                    b.Navigation("Offerings");
                });

            modelBuilder.Entity("ShareForFuture.Data.User", b =>
                {
                    b.Navigation("AssignedComplains");

                    b.Navigation("Borrows");

                    b.Navigation("Complains");

                    b.Navigation("ComplainsAbout");

                    b.Navigation("Offerings");
                });

            modelBuilder.Entity("ShareForFuture.Data.UserGroup", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
